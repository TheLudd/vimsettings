snippet t "Description" b
`!p 
from subprocess import Popen, PIPE
source = t[1]
goodPart = source.rpartition('/')[2]
p = Popen(['change-case', '-c', goodPart], stdout=PIPE)
full = p.communicate()[0].strip()
snip.rv = full
` = require('$1')
endsnippet

snippet G "Given"
Given -> 
endsnippet

snippet Gi "Given inject"
Given inject ($1) -> 
endsnippet

snippet W "When"
When -> 
endsnippet

snippet Wi "When inject"
When inject ($1) -> 
endsnippet

snippet Wd "When (done)"
When (done) -> 
endsnippet

snippet T "Then"
Then -> 
endsnippet

snippet A "And"
And -> 
endsnippet

snippet I "Invariant"
Invariant -> 
endsnippet

snippet r "Require" b
${1/.*/\u$0/} = require '$1'
endsnippet

snippet f "function"
-> $1
endsnippet

snippet fu "function with arguments"
($1) ->
endsnippet

snippet F "function"
=> $1
endsnippet

snippet FU "function with arguments"
($1) =>
endsnippet

snippet amm "Angular mock module" 
angular.mock.module '${1:Falcon}'
endsnippet

snippet contest "Controller test" b
describe '$1', ->
    Given -> angular.mock.module 'Falcon'

    When inject ($rootScope, $controller) ->
        @scope = $rootScope.$new()
        $controller '$1',
            $scope: @scope

    Then ->
endsnippet

snippet lod "Require lodash" b
_ = require 'lodash'
endsnippet

snippet P "Blubird Pomise" b
Promise = require 'bluebird'
endsnippet

snippet fac "Angular Factory" b
angular.module('$1').factory '$2', ->
endsnippet

snippet ser "Angular Service" b
angular.module('$1').service '$2', ->
endsnippet

snippet fil "Angular Filter" b
angular.module('$1').filter '$2', ->
endsnippet

snippet con "Angular Filter" b
angular.module('$1').controller '$2', ->
endsnippet

snippet dir "Angular Directive" b
angular.module('$1').directive '$2', ->
	restrict: 'AE'
	scope: {}
	link: (scope, element, attrs) ->
endsnippet

snippet state "Ui router state" b
.state '$1',
	url: '$2'
	controller: '$3'
	template$4: '$5'
	resolve:
		$6
endsnippet

snippet sc "Scope var" b
$scope.$1 = $1
endsnippet

snippet route "Route"
routes.$1 '$2', (req, res) ->
  res.end()
endsnippet
